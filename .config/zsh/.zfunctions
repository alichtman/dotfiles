#################
# zsh Functions #
#################

# nnn Integrations {{{

n ()
{
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The command builtin allows one to alias nnn to n, if desired, without
    # making an infinitely recursive alias
    command nnn -a -e -H -U -x -d "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" > /dev/null
    }
}
alias nnn="n"

# }}}

# fzf Integrations {{{

# File Open
# fo / fos [FUZZY PATTERN] - Open the selected file with $EDITOR / subl
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fo() {
	local files
	IFS=$'\n' files=($(fzf --preview="cat {}" --preview-window=right:70%:wrap --query="$1" --multi --select-1 --exit-0))
	[[ -n "$files" ]] && ${EDITOR} "${files[@]}"
}


# fman [FUZZY PATTERN] - Search man pages.
function fman() {
	man -k . | fzf --prompt='Man> ' | awk '{print $1}' | cut -d "(" -f1 | xargs man
}

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
function fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

# END fzf integrations }}}

# git {{{

# gi [OS,LANGUAGE,ETC]
function gi() {
	curl -sLw "\n" https://www.gitignore.io/api/"$@" ;
}

# Prettier diffs
function prettydiff() {
	diff -u $1 $2 | diff-so-fancy
}

# END git }}}

# Dotfiles {{{

# FZF file selector to edit config files with vim
function config() {
	fd . "$XDG_CONFIG_HOME" | sed "s|$XDG_CONFIG_HOME/||" |
	    fzf \
	    --preview-window=right:70%:wrap \
        --bind "enter:become(vim $XDG_CONFIG_HOME/{})" --exit-0 \
        --walker-skip .git,node_modules,target \
        --preview "bat -n --color=always $XDG_CONFIG_HOME/{}"
}
alias cfg=config

# Refresh zsh config env
function resource() (
    # The outer function definition with () makes this behave like nested python functions. https://stackoverflow.com/a/31316688/8740440
    function _source_files () {
	    for file in "$@"; do
		    if [[ -r "$file" ]] && [[ -f "$file" ]]; then
			    echo "Sourcing $file";
			    source "$file";
		    else
			    echo "Unable to source $file for some reason."
		    fi
	    done
	    unset file
    }

    # MUST be first
    _source_files "$ZDOTDIR/.zshenv"
    _source_files $ZDOTDIR/.{zprofile,aliases,zshrc,zfunctions}
    _source_files "$XDG_CONFIG_HOME/.secrets"
)

# END Dotfiles }}}

# Misc {{{

function cheat() {
	curl cheat.sh/$1
}

function yt-download-audio() {
	youtube-dl -x --audio-format=mp3 $1
}

# https://gist.github.com/emreberge/1424710
function help (){
    bash -c "help $@"
}

# END Misc }}}

# Unix Shortcuts {{{

# Syntax highlighting for dig
function dig() {
  /usr/bin/dig $* | awk '
    !/^;/    { print "\033[1;32m"$0 }
    /^;[^;]/ { print "\033[1;33m"$0 }
    /^;;/    { print "\033[1;36m"$0 }
    END      { print "\033[0m" }
  ';
}


# Searchable bash man pages
# Usage: bashman -z
function bashman() {
    man bash | less -p "^       $1 ";
}

# tree command with "quick jump" ability
function tre() {
	command tre "$@" -e && source "/tmp/tre_aliases_$USER" 2>/dev/null;
}

# Make a directory and cd into it.
function mk() {
	mkdir "$1" && cd "$1" || exit;
}

# Copy file contents to clipboard.
function copy() {
	OS=$(uname -s)
	if [ "$OS" = "Darwin" ]; then
		pbcopy < "$1"
	elif [ "$OS" = "Linux" ]; then
		xsel -i < "$1"
	fi
}

# Pretty viewer for csv files
function csvviewer() {
    column -s, -t < "$1" | less -#2 -N -S
}

# END Unix Shortcuts }}}

# macOS fuzzy app launcher
# This function breaks the syntax highlighting so it's at the end lmao
if [ "$OS" = "Darwin" ]; then
    function launch() {
        open -a "$(find /Applications /System/Applications/ /System/Applications/Utilities -name '*app' -maxdepth 1 -exec basename {} .app \; | fzf --query "$1")"
    }
fi

# vim: set filetype=zsh foldmethod=marker:
